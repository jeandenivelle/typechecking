%dir erratic
%namespace erratic

%define term ( term_unit )

%option bool { term_bool } => b : char 
%option char { term_char } => c : char
%option sel  { term_sel }  => s : usel

%option uninit { term_unit, term_u64, term_iter,
                 term_integer, term_double } =>

%option repeated { term_tuple,
                   term_nondet } => [ sub : term ]

%h_incl {
   #include "tvm/includes.h"
   #include "tvm/unit.h" 
   #include "usel.h"
   #include "util/print.h"
}

%h_methods {
   void print( std::ostream& ) const;
}

%cpp_back {
	void
	erratic::term::print
	( std::ostream& out ) const
	{
		switch( sel( ) )
		{
		case term_bool:
		out << view_bool( ). b( );
		return;

		case term_char:
		out << view_char( ). c( );
		return;

		case term_sel:
		out << view_sel( ). s( );
		return;

		case term_unit:
		case term_u64:
		case term_iter:
		case term_integer:
		case term_double:
		out << '?' << sel( );
		return;

		case term_tuple:
		{
			const auto tuple = view_repeated( );
			out << '(';
			for( size_t i = 0; i < tuple. size( ); ++i )
			{
				if( i ) out << ", ";
				out << tuple. sub( i );
			}
			out << ')';
		}
		return;

		case term_nondet:
		{
			const auto nondet = view_repeated( );
			out << '{';
			for( size_t i = 0; i < nondet. size( ); ++i )
			{
				if( i ) out << ", ";
				out << nondet. sub( i );
			}
			out << '}';
		}
		return;
		}
		
		out << "error: erratic::term::print for " << sel( ) << " not implemented\n";
		throw std::runtime_error( "stop" );
	}
} 


%dir setterm

%namespace setterm

%define setterm( setterm_never )

%option never    { setterm_never }   =>
%option unit     { setterm_unit }    =>
%option bool     { setterm_bool }    => b : char 
%option char     { setterm_char }    => c : char
%option sel      { setterm_sel }     => s : usel
%option u64      { setterm_u64 }     => i : size_t
%option iter     { setterm_iter }    => s : size_t
%option integer  { setterm_integer } => i : bigint 
%option double   { setterm_double }  => d : double 
%option repeated { setterm_tuple,
                   setterm_set }     => [ sub : setterm ]

%h_incl {
   #include "tvm/includes.h"
   #include "tvm/unit.h" 
   #include "usel.h"
   #include "util/print.h"
   #include "util/bigint.h"
}

%h_methods {
   struct equal_to
   {
      equal_to( ) noexcept = default;
      bool operator ( ) ( const setterm&, const setterm& ) const;  
   }; 
   void print( std::ostream& ) const;
}

%h_after {
	inline bool operator== ( const setterm& s1, const setterm& s2 )
	{ auto eq = setterm::equal_to( ); return eq( s1, s2 ); }
}

%define atom( atom0 )

%option empty { atom0 } =>
%option atom1 { atom1 } => v : exactident, s : setterm
%option atom2 { atom2 } => v : exactident, i : exactident, s : setterm
%option atom3 { atom3 } => v : exactident, t1 : exactident, t2 : exactident, s : setterm
%option atom4 { atom4 } => t1 : exactident, t2 : exactident, [ s : setterm ]

%h_incl {
   #include "tvm/includes.h"
   #include "tvm/unit.h"
   #include "util/print.h"
   #include "setterm/setterm.h"
   #include "exactident.h"
}

%h_methods { 
   struct equal_to
   {
      equal_to( ) noexcept = default;
      bool operator ( ) ( const atom&, const atom& ) const;  
   };
   void print( std::ostream& ) const;
}

%h_after {
	inline bool operator== ( const atom& a1, const atom& a2 )
	{ auto eq = atom::equal_to( ); return eq( a1, a2 ); }
}


%dir flowgraph

%namespace flowgraph

// A constant or a variable:

%define flatterm ( flat_unitconst )
%option var         { flat_var } => # v : variable
%option unitconst   { flat_unitconst } => 
%option boolconst   { flat_boolconst } => # b : bool
%option charconst   { flat_charconst } => # c : char
%option selconst    { flat_selconst } => # s : usel
%option u64const    { flat_u64const } => # u : size_t 
%option doubleconst { flat_doubleconst } => # d : double

%option unary { flat_len, flat_not, flat_neg } => # v : variable
   // I prefer 'size' instead of 'len', but I decided to
   // use Python names everywhere.

%option binary { flat_eq, flat_ne, flat_lt, flat_gt,
                 flat_le, flat_ge,
                 flat_add, flat_sub } => # v1 : variable, v2 : variable

%option field { flat_field } => # v : variable, fld : size_t, 
                                  ind : std::optional< variable > 

%option call { flat_call } => func : exactident, [ v : variable ]

%option scal { flat_scal } => [ v : variable ] 
%option vect { flat_vect } => nrrep : size_t, [ v : variable ] 
%option list { flat_list } => nrrep : size_t, [ v : variable ] 
   // In the last two cases, we provide the scalar fields as initializers,
   // and specify how many repeated fields there are. 

%h_incl {
   #include <optional>
   #include <vector>
   #include <utility>

   #include "variable.h"
   #include "tvm/includes.h" 
   #include "util/print.h"
   #include "util/hexprint.h"
   #include "usel.h" 
   #include "exactident.h" 
}

%h_methods {
   void print( std::ostream& out ) const;
}

%cpp_back {
   void flowgraph::flatterm::print( std::ostream& out ) const
   {
      switch( sel( ))
      {
      case flat_var:
         {
            auto v = view_var( );
            out << v. v( );
            return;
         }
      case flat_unitconst:
         {
            out << "trivial"; 
            return;
         } 
      case flat_boolconst:
         {
            auto b = view_boolconst( );
            out << ( b. b( ) ? "true" : "false" );
            return;
         }
      case flat_charconst:
         {
            auto c = view_charconst( );
            out << '\'';
            if( isprint( c. c( )))
               out << c. c( );
            else
            {
               out << '{'; 
               util::hexprint( out, c.c( ));
               out << '}';
            }
            out << '\'';
            return; 
         }
      case flat_selconst:
         {
            auto u = view_selconst( );
            out << '?' << u. s( );
            return; 
         }
      case flat_u64const:
         {
            auto u = view_u64const( );
            out << u. u( );
            return;
         }
      case flat_doubleconst:
         {
            auto d = view_doubleconst( );
            out << d. d( );
            return;
         }
      case flat_len:
      case flat_not:
      case flat_neg:
         {
            auto un = view_unary( );
            out << "( ";
            switch( sel( ))
            {
            case flat_len:
               out << "# "; break;
            case flat_not:
               out << "! "; break;
            case flat_neg:
               out << "- "; break;
            }
            out << un. v( ) << " )";
            return;
         }
      case flat_eq:
      case flat_ne:
      case flat_lt:
      case flat_gt:
      case flat_le:
      case flat_ge:
      case flat_add:
      case flat_sub:
         {
            auto b = view_binary( );
            out << "( " << b. v1( ); 
            switch( sel( ))
            {
            case flat_eq: out << " == "; break;
            case flat_ne: out << " != "; break; 
            case flat_lt: out << " < "; break;
            case flat_gt: out << " > "; break; 
            case flat_le: out << " <= "; break;
            case flat_ge: out << " >= "; break;
            case flat_add: out << " + "; break;
            case flat_sub: out << " - "; break;
            default: out << "???"; break; 
            } 
            out << b. v2( ) << " )";
            return;
         }
      case flat_scal:
         {
            out << "(";
            auto scal = view_scal( );
            for( size_t i = 0; i != scal. size( ); ++ i )
            {
               if( i != 0 )
                  out << ", ";
               else
                  out << " ";
               out << scal. v(i);
            }
            out << " )";
            return;
         } 
      case flat_call:
         {
            auto c = view_call( );
            out << c. func( ) << '(';
            for( size_t i = 0; i != c. size( ); ++i )
            {
               if(i) 
                  out << ", ";
               else
                  out << ' ';
               out << c. v(i);
            }
            out << " )";
            return; 
         }
      case flat_field:
         {
            auto fld = view_field( );
            out << fld. v( ) << ".#" << fld. fld( );
            if( fld. ind( ). has_value( ))
               out << "[ " << fld. ind( ). value( ) << " ]";
            return; 
         }

      }

      std::cout << "for " << sel( ) << "\n";
      throw std::runtime_error( "flowgraph::flatterm::print not implemented" );
   }
}


%define statement ( stat_nop )
%prefix pnt : point
%option nop { stat_nop } => 

%option assign { stat_assign } => v : variable, val : flatterm
%option unary  { stmnt_not } => v : variable, w : variable 
%option binary { stmnt_and, 
                 stmnt_or, 
                 stmnt_eq,
                 stmnt_lt,
                 stmnt_le,
                 stmnt_gt,
                 stmnt_ge  } => v : variable, w1 : variable, w2 : variable
%option push     { stmnt_push  } => v : variable, [ w : variable ]
%option pop      { stmnt_pop   } => v : variable
%option strct    { stmnt_strct } => v : variable, k : size_t, [ w : variable ]
%option is       { stat_is } => # f : flatterm, p : prop::expr
%option if       { stat_iftrue, stat_iffalse } => v : variable 
%option resolve  { stat_resolve } => [ prec : precond, stat : statement ]

%option update   { stat_update } => v : variable, fld : size_t, 
                          ind : std::optional< variable >, val : variable 

%option return  { stat_return } => v : variable 
%option intrpt  { stmnt_abort,
                  stmnt_error  } => mssg : std::string

%option goto    { stat_goto } => lab : label 
%option block   { stat_block } => [ stat : statement ]
%option branch  { stat_branch } => [ opt : statement ]

// %option merge  { stmnt_merge  } => [ p : programpoint ]

%h_incl {
	#include "util/print.h"
        #include "util/indentation.h"
        #include "util/hexprint.h"
	#include "tvm/includes.h"
	#include "flatterm.h"
	#include "variable.h"
	#include "label.h"
        #include "point.h"
	#include "prop/expr.h"
}

%h_before 
{
   struct precond 
   {
      std::vector< std::pair< variable, prop::expr >> prec;

      precond( const std::vector< std::pair< variable, prop::expr >> & prec )
         : prec( prec )
      { }

      precond( std::vector< std::pair< variable, prop::expr >> && prec )
         : prec( std::move( prec ))
      { }

      void print( std::ostream& out ) const;
   };

   inline 
   bool very_equal( const precond& prec1, const precond& prec2 )
      { return prec1. prec. data( ) == prec2. prec. data( ); } 

}

%h_methods {
   void print( indentation ind, std::ostream& out ) const;
   void print( std::ostream& out ) const 
      { print( indentation(0), out ); } 
}

%cpp_back {

   void
   flowgraph::precond::print( std::ostream& out ) const
   {
      for( auto p = prec. begin( ); p != prec. end( ); ++ p )
      {
         if( p != prec. begin( ))
           out << ", ";
         out << ( p -> first ) << " is " << ( p -> second );
      }
   }

   void 
   flowgraph::statement::print( indentation ind, std::ostream& out ) const
   {
      out << ind << pnt( ) << ": ";
      switch( sel( ))
      {
      case stat_nop:
         out << "nop\n"; return;

// case stmnt_usel_assgn:
// 		{
// 			const auto& assgn = view_usel_assgn( );
// 			out << assgn. v( ) << " <- " << assgn. s( );
// 		}
// 		break;

      case stat_assign:
         {
            auto a = view_assign( );
            out << a. v( ) << " <-- " << a. val( ) << '\n';
            return;
         }

// 		case stmnt_char_assgn:
// 		{
// 			const auto& assgn = view_char_assgn( );
// 			out << assgn. v( ) << " <- " << assgn. c( );
// 		}
// 		break;

// 		case stmnt_var_assgn:
// 		{
// 			const auto& assgn = view_var_assgn( );
// 			out << assgn. v( ) << " <- " << assgn. w( );
// 		}
// 		break;

// 		case stmnt_unknown_assgn:
// 		{
// 			const auto& assgn = view_unknown_assgn( );
// 			out << assgn. v( ) << " <- " << assgn. t( );
// 		}
// 		break;

// 		case stmnt_not:
// 		{
// 			const auto& unary = view_unary( );
// 			out << unary. v( ) << " <- " << sel( ) << "( " << unary. w( ) << " )";
// 		}
// 		break;

//		case stmnt_push:
//		{
//			const auto& push = view_push( );
//			out << push. v( ) << ". push( ";
//			for( size_t i = 0; i < push. size( ); ++i )
//			{
//				if( i ) out << ", ";
//				out << push. w( i );
//			}
//			out << " )"; 
//		}
//		break;

//		case stmnt_pop:
//		out << view_pop( ). v( ) << ". pop( )";
//		break;

//		case stmnt_strct:
//		{
//			const auto& strct = view_strct( );
//			out << strct. v( ) << " <= ( ";
//			for( size_t i = 0; i < strct. size( ); ++i )
//			{
//				if( i ) out << ", ";
//				out << strct. w( i );
//			}
//			out << ", " << strct. k( ) << " )";
//		}
//		break;

//		case stmnt_fslct:
//		{
//			const auto& fslct = view_fslct( );
//			out << fslct. v( ) << " <= " << fslct. w( ) << ". " << fslct. f( );
//		}
//		break;
		
      case stat_is: 
         {
            auto pr = view_is( ); 
            out << "if " << pr. f( ) << " is " << pr. p( ) << '\n'; 
            return;
         }

      case stat_iftrue:
      case stat_iffalse: 
         {
            auto cond = view_if( );
            switch( sel( )) 
            {
            case stat_iftrue:
               out << "iftrue "; break;
            case stat_iffalse:
               out << "iffalse "; break;
            default:
               out << "???"; break;
            }
            out << cond. v( ) << '\n';
            return;
         } 

      case stat_resolve:
         {
            auto res = view_resolve( );
            out << "resolve\n";
            for( size_t i = 0; i != res. size( ); ++ i )
            {
               out << ind << "require ";
               out << res. prec(i) << " at " << pnt( ) << " :\n";
               res. stat(i). print( ind + 3, out ); 
            }
            return;
         }
 
      case stat_update:
         {
            auto up = view_update( ); 
            out << "update " << up. v( ) << ".#" << up. fld( ); 
            if( up. ind( ). has_value( ))
               out << "[ " << up. ind( ). value( ) << " ]";
            out << " := " << up. val( ) << "\n";
            return;
         } 

      case stat_return:
         {
            out << "return " << view_return( ). v( ) << '\n';
            return;
         }

//		case stmnt_abort:
//		case stmnt_error:
//		out << sel( ) << " \"" << view_intrpt( ). mssg( ) << '"';
//		break;

  
      case stat_goto:
         {
            out << "goto " << view_goto( ). lab( ) << "\n";
            return;
         }

      case stat_block:
         {
            out << "block\n";
            auto c = view_block( );
            for( size_t i = 0; i != c. size( ); ++ i )
               c. stat(i). print( ind + 3, out );
          
            return;
         }

      case stat_branch:
         {
            out << "branch\n";
            auto b = view_branch( );
            for( size_t i = 0; i != b. size( ); ++ i )
            {
               out << ind << "option of " << pnt( ) << ":\n";
               b. opt(i). print( ind + 3, out ); 
            } 
            return;
         }
//		case stmnt_merge:
//		{
//			auto merge = view_merge( );
//			for( size_t i = 0; i < merge. size( ); ++i )
//			{
//				if( i ) out << ", ";
//				out << merge. p( i );
//			}
//			out << " merge";
      }
      out << sel( ) << "\n";
      out << "dont know how to print\n";
   }
}
